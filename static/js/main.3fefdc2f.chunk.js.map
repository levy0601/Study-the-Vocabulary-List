{"version":3,"sources":["spinner.svg","utility/errorMessage.js","utility/themeSet.js","component/navigation/ThemeSetter.jsx","component/navigation/NavigationBar.jsx","component/login/Login.jsx","utility/sort.js","utility/InputValidation.js","component/word-list-page/Word.jsx","component/word-list-page/SortByTaskFilter.jsx","component/word-list-page/WordList.jsx","component/learning-option/FlipCard.jsx","component/learning-option/FlipCardController.jsx","component/learning-option/Option.jsx","component/learning-option/WordTest.jsx","utility/generateTestOption.js","component/learning-option/WordTestController.jsx","component/word-list-page/WordListPage.jsx","component/home-page/WordListDescription.jsx","component/home-page/SelectWordListBlock.jsx","component/home-page/HomePage.jsx","reducer/wordListReducer.js","App.jsx","service/services.js","serviceWorker.js","index.js"],"names":["module","exports","errorMessage","getErrorMessage","err","themeSet","ThemeSetter","onThemeChange","state","className","id","onChange","value","theme","NavigationBar","userProfileState","selectWordListState","isLoggedIn","error","onLogout","onBack","onClick","isSelected","Login","onLogin","setError","useState","isLoading","setIsLoading","username","setUsername","loginError","setLoginError","event","target","placeholder","type","alt","src","spinner","then","catch","message","sortByAlphabeticalAscending","a","b","wordName","toUpperCase","sortByAlphabeticalDescending","isInputValidation","input","replace","length","Word","wordListId","wordId","definition","onDeleteWord","onUpdateWord","setErrorState","isEditableState","setIsEditableState","wordNameState","setWordNameState","definitionState","setDefinitionState","useEffect","SortByTaskFilter","checkBoxOnchange","selectOnchange","isSort","order","WordList","words","wordList","onAddWord","onRefresh","onDeleteAllWord","wordInputState","setWordInputState","definitionInputState","setDefinitionInputState","sortByWordState","setSortByWordState","wordsArray","Object","values","sort","map","word","key","wordListName","FlipCard","FlipCardController","wordListArray","indexState","setIndexState","Option","onCheckAnswer","WordTest","testOptions","isCorrect","setIsCorrect","options","answer","shuffleContent","array","i","j","Math","floor","random","temp","generateTestOption","wordListFiltered","filter","item","min","max","sliceIndex","ceil","sliceWordList","slice","push","WordTestController","newWordListArray","WordListPage","onRefreshList","isShowFlashCardState","setIsShowFlashCardState","WordListDescription","numberOfWord","onWordListSelect","isEditState","onDeleteWordList","SelectWordListBlock","wordListDescription","wordLists","HomePage","wordListState","onDeleteAllList","onCreateWordList","inputState","setInputState","isCreateState","setIsCreateState","setIsEditState","DEFAULT_WORDLIST","createNewWordList","createNewWord","taskReducer","action","newState","newWordList","updateTask","deletedState","App","content","isLoggedInState","setIsLoggedInState","errorState","setUserProfileState","setSelectWordListState","useReducer","wordListReducer","wordListDispatch","getAllWordList","clearErrorState","fetch","method","Promise","reject","code","response","ok","json","result","getAllWordListService","setWordListToLocalState","data","logout","getUserProfile","setUserProfile","document","body","setAttribute","headers","Headers","JSON","stringify","createWordService","createWordToLocalState","updateWordService","updateWordToLocalState","removeWordService","removeWordFromLocalState","removeAllWordService","removeAllWordFromLocalState","removeWordListService","removeWordListFromLocalState","createWordListService","createWordListToLocalState","updateThemeService","fetchLogInService","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.3fefdc2f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.414a23f5.svg\";","\r\nexport const errorMessage = {\r\n    'network-error':'Can not connect to the server, please check your network connection',\r\n    'no valid session': 'There is a authentication occur, please login again.',\r\n    'login denied' : 'The username is empty or contain illegal character, please input username again',\r\n    'action not permitted' : 'You are not allow to perform such action',\r\n    'no tasks for user' : 'Can not find the task, please try again',\r\n    'failed to update' : 'Can not update the task, please try again',\r\n    'task name empty' :'the task name is empty, please enter the desired task name',\r\n    'require information missing' : 'there is require information missing, please try again',\r\n    'no such wordList': 'The wordList you want to change has been removed or updated, please check if the wordList exist',\r\n    'no such word' :'The word you want to change has been removed or updated, please check if the wordList exist',\r\n    'failed to delete' : 'Can not delete the task, please try again',\r\n    'not valid input' : 'The information you provide is empty or only contain empty, please try again'\r\n};\r\n\r\n\r\nexport function getErrorMessage(err){\r\n    return errorMessage[err] || err;\r\n}","export const themeSet = {\r\n    LIGHT : 'light', DARK : 'dark', COLORFUL : 'colorful'\r\n};","import React from 'react';\r\nimport './ThemeSetter.css'\r\nimport {themeSet} from \"../../utility/themeSet\";\r\n\r\nconst ThemeSetter = ({onThemeChange,state}) => {\r\n\r\n    return (\r\n        <div className={'theme-setter'}>\r\n            <span>Theme</span>\r\n            <select id={'sort-by-task-drop-down'} onChange={onThemeChange} value={state.theme}>\r\n                <option value={themeSet.LIGHT}>{themeSet.LIGHT}</option>\r\n                <option value={themeSet.DARK}>{themeSet.DARK}</option>\r\n                <option value={themeSet.COLORFUL}>{themeSet.COLORFUL}</option>\r\n            </select>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default ThemeSetter;\r\n","import React from 'react';\r\nimport './NavigationBar.css';\r\nimport ThemeSetter from \"./ThemeSetter\";\r\n\r\nconst NavigationBar = ({ userProfileState,selectWordListState,isLoggedIn, error, onLogout,onThemeChange,onBack }) => {\r\n\r\n    return (\r\n        <div className='nav'>\r\n            { error && <span className={'error-message'}> {error} </span>}\r\n\r\n            { isLoggedIn && <button className = \"logout action button\" onClick={onLogout}>Logout</button>}\r\n            { selectWordListState.isSelected && <button className = \"back action button\" onClick={onBack}>Back</button>}\r\n\r\n            <ThemeSetter onThemeChange = {onThemeChange} state = {userProfileState}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavigationBar;","import React, { useState } from 'react';\r\nimport spinner from \"../../spinner.svg\";\r\nimport {errorMessage,getErrorMessage} from \"../../utility/errorMessage\"\r\nimport './Login.css';\r\n\r\n\r\nconst Login = ({onLogin,setError}) =>{\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [username,setUsername] = useState(\"\");\r\n    const [loginError,setLoginError] = useState('');\r\n\r\n\r\n\r\n    function performLogin (){\r\n        if(!username){\r\n            setLoginError(errorMessage[\"login denied\"]);\r\n            return;\r\n        }\r\n\r\n        setError(\"\");\r\n        setIsLoading(true);\r\n\r\n        onLogin(username)\r\n            .then(setIsLoading(false))\r\n            .catch((error) => {\r\n                setLoginError (getErrorMessage(error.message));\r\n                setIsLoading(false);\r\n            });\r\n\r\n    }\r\n\r\n    function getUserName(event){\r\n        setUsername(event.target.value);\r\n    }\r\n\r\n\r\n\r\n    return(\r\n        <div className =\"login-page\">\r\n            <div className={'form'}>\r\n                <p className=\"message\">{loginError}</p>\r\n                <input onChange = {getUserName} placeholder={'username'} type={'text'}/>\r\n                { isLoading ?\r\n                    <img alt='spinner' src = {spinner} />:\r\n                    <button onClick={performLogin}>Login</button>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Login;\r\n\r\n","export function sortByAlphabeticalAscending(a,b){\r\n    if(a.wordName.toUpperCase() < b.wordName.toUpperCase()) { return -1; }\r\n    if(a.wordName.toUpperCase() > b.wordName.toUpperCase()) { return 1; }\r\n    return 0;\r\n}\r\n\r\n\r\nexport function sortByAlphabeticalDescending(a,b){\r\n    if(a.wordName.toUpperCase() < b.wordName.toUpperCase()) { return 1; }\r\n    if(a.wordName.toUpperCase() > b.wordName.toUpperCase()) { return -1; }\r\n    return 0;\r\n}\r\n\r\n\r\n","function isInputValidation(input){\r\n    return input && input.replace(/\\s/g, '').length\r\n}\r\n\r\nexport default isInputValidation;","import React, {useEffect, useState} from 'react';\r\nimport './Word.css';\r\nimport isInputValidation from \"../../utility/InputValidation\";\r\nimport {getErrorMessage} from \"../../utility/errorMessage\";\r\n\r\nconst Word = ({wordListId,wordId,wordName,definition,onDeleteWord,onUpdateWord,setErrorState}) => {\r\n    const [isEditableState,setIsEditableState] = useState(false);\r\n    const [wordNameState,setWordNameState] = useState('');\r\n    const [definitionState,setDefinitionState] = useState('');\r\n\r\n    useEffect(()=>{\r\n        setWordNameState(wordName);\r\n        setDefinitionState(definition);\r\n    },[wordName,definition]);\r\n\r\n    function toggleIsEditable(){\r\n        setIsEditableState(!isEditableState);\r\n    }\r\n\r\n    function getWordNameInput(event) {\r\n        setWordNameState(event.target.value);\r\n    }\r\n\r\n    function getDefinitionInput(event){\r\n        setDefinitionState(event.target.value);\r\n    }\r\n\r\n    function setDefaultState(){\r\n        setWordNameState(wordName);\r\n        setDefinitionState(definition);\r\n    }\r\n\r\n    function onDeleteWithWordId() {\r\n        onDeleteWord(wordListId,wordId);\r\n    }\r\n\r\n    function onUpdateWithInput(){\r\n        if(!isInputValidation(wordNameState) || !isInputValidation(definitionState)){\r\n            setErrorState(getErrorMessage('not valid input'));\r\n            return;\r\n        }\r\n        onUpdateWord(wordListId,wordId,wordNameState,definitionState);\r\n    }\r\n\r\n\r\n    return (\r\n        <li className={`word-list-item item ${!isEditableState ? \"\" : \"editable\"}`} >\r\n            <label className={`label name-label`}>{wordNameState}</label>\r\n            <input className={`text-input name-input`} type={'text'} value={wordNameState} onChange={getWordNameInput}/>\r\n            <label className={`label definition-label`}>{definitionState}</label>\r\n            <input className={`text-input definition-input`} type={'text'} value={definitionState} onChange={getDefinitionInput}/>\r\n            <button className={'edit'} onClick={toggleIsEditable}> Edit</button>\r\n            <button className={'reset'} onClick={setDefaultState}>Undo</button>\r\n            <button className={'delete'} onClick={onDeleteWithWordId}>Delete</button>\r\n            <button className={'update'} onClick={onUpdateWithInput}> Update</button>\r\n        </li>\r\n    )\r\n};\r\n\r\n\r\nexport default Word;\r\n","import React from 'react';\r\n\r\nconst SortByTaskFilter = ({checkBoxOnchange,selectOnchange,state}) => {\r\n    return(\r\n        <div className={'filter-item'}>\r\n            <input type={'checkbox'} id={'sortByTaskFilter'}\r\n                   onChange={checkBoxOnchange} value={state.isSort}/>\r\n            <span>Sort by Name</span>\r\n            <select id={'sort-by-task-drop-down'} onChange={selectOnchange} value={state.order}>\r\n                <option value={'ascending'}>Ascending</option>\r\n                <option value={'descending'}>Descending</option>\r\n            </select>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default SortByTaskFilter;\r\n","import React, {useState} from 'react';\r\nimport {sortByAlphabeticalAscending, sortByAlphabeticalDescending} from \"../../utility/sort\";\r\nimport Word from \"./Word\";\r\nimport SortByTaskFilter from \"./SortByTaskFilter\";\r\nimport './WordList.css';\r\nimport isInputValidation from \"../../utility/InputValidation\";\r\nimport {getErrorMessage} from \"../../utility/errorMessage\";\r\n\r\nconst WordList = ({wordList,onDeleteWord,onUpdateWord,onAddWord,onRefresh,onDeleteAllWord,setErrorState}) => {\r\n    const [wordInputState,setWordInputState] = useState(\"\");\r\n    const [definitionInputState,setDefinitionInputState] = useState(\"\");\r\n    const [sortByWordState,setSortByWordState] = useState({isSort:false,order:\"ascending\"});\r\n    const wordListId = wordList.wordListId;\r\n\r\n    let wordsArray = Object.values(wordList.words);\r\n    let words;\r\n\r\n    if(sortByWordState.isSort){\r\n        if(sortByWordState.order === 'ascending'){\r\n            wordsArray = wordsArray.sort(sortByAlphabeticalAscending);\r\n        }\r\n        if(sortByWordState.order === 'descending'){\r\n            wordsArray = wordsArray.sort(sortByAlphabeticalDescending);\r\n        }\r\n    }\r\n\r\n    words = wordsArray.map((word) =>\r\n        <Word wordName={word.wordName} definition={word.definition} onUpdateWord={onUpdateWord} onDeleteWord={onDeleteWord}\r\n              wordId={word.wordId} wordListId={wordListId} key={word.wordId} setErrorState={setErrorState}/>\r\n    );\r\n\r\n    function getWordNameInput(event) {\r\n        setWordInputState(event.target.value);\r\n    }\r\n\r\n    function getDefinitionInput(event){\r\n        setDefinitionInputState(event.target.value);\r\n    }\r\n\r\n    function toggleSortByWordState(){\r\n        setSortByWordState({...sortByWordState,isSort:!sortByWordState.isSort});\r\n    }\r\n\r\n    function setSortByWordOrder(event){\r\n        setSortByWordState({...sortByWordState,order:event.target.value});\r\n    }\r\n\r\n    function onAddWordWithInputValue(){\r\n        if(!isInputValidation(wordInputState) || !isInputValidation(definitionInputState)){\r\n            setErrorState(getErrorMessage('not valid input'));\r\n            return;\r\n        }\r\n        onAddWord(wordListId,wordInputState,definitionInputState);\r\n        clearInput();\r\n    }\r\n\r\n    function onDeleteAllWordWithWordListId(){\r\n        onDeleteAllWord(wordListId);\r\n    }\r\n\r\n    function clearInput(){\r\n        setDefinitionInputState('');\r\n        setWordInputState('');\r\n    }\r\n\r\n    return (\r\n        <div className={'word-list'}>\r\n            <h3 > {wordList.wordListName} </h3>\r\n            <div className={'list-management'}>\r\n                <button className={'button'} onClick={onRefresh}>Refresh</button>\r\n                <button className={'button delete'} onClick={onDeleteAllWordWithWordListId}>Delete</button>\r\n            </div>\r\n            <div className={'list-filter'}>\r\n                <SortByTaskFilter checkBoxOnchange={toggleSortByWordState} selectOnchange={setSortByWordOrder} state={sortByWordState}/>\r\n            </div>\r\n            <ul>\r\n                {words}\r\n            </ul>\r\n            <div className={'add-item'}>\r\n                <label className={'new-word'}>Add Task</label>\r\n                <span>Word</span>\r\n                <input className={'text-input new-word-name-input'} value={wordInputState} onChange={getWordNameInput}/>\r\n                <span>Definition</span>\r\n                <input className={'text-input new-definition-input'} value={definitionInputState} onChange={getDefinitionInput}/>\r\n                <button className={'add'} onClick={onAddWordWithInputValue}>Add</button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default WordList;\r\n","import React from 'react';\r\nimport './FlipCard.css'\r\n\r\nconst FlipCard = ({word,definition}) => {\r\n    return (\r\n        <div className={'flip-card'}>\r\n            <div className={'flip-card-inner'}>\r\n                <div className={'flip-card-front'}>\r\n                    <p className={'word'}>{word}</p>\r\n                </div>\r\n                <div className={'flip-card-back'}>\r\n                    <p className={'definition'}>{definition} </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default FlipCard;\r\n","import React, {useState} from 'react';\r\nimport FlipCard from \"./FlipCard\";\r\nimport './FlipCardController.css'\r\n\r\nconst FlipCardController = ({wordListArray}) => {\r\n    const [indexState,setIndexState] = useState(0);\r\n\r\n    function incrementIndex(){\r\n        setIndexState( ((indexState + 1) > (wordListArray.length -1))? wordListArray.length -1 : (indexState + 1));\r\n    }\r\n\r\n    function decrementIndex() {\r\n        setIndexState( (indexState -1) < 0 ? 0 : (indexState - 1));\r\n    }\r\n\r\n    return (\r\n        <div className={'flip-card-controller'}>\r\n            <p className={'flip-card-title'}>Flash Card</p>\r\n            <FlipCard word={wordListArray[indexState] ? wordListArray[indexState].wordName : ''} definition={wordListArray[indexState] ? wordListArray[indexState].definition : ''}/>\r\n            <div className={'controller'}>\r\n                <button className={'decrement'} onClick={decrementIndex}> {\"<\"} </button>\r\n                <button className={'increment'} onClick={incrementIndex}> {\">\"} </button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default FlipCardController;\r\n\r\n","import React from 'react';\r\n\r\nconst Option = ({word,onCheckAnswer}) => {\r\n\r\n    function onCheckAnswerWithDefinition() {\r\n        onCheckAnswer(word.definition);\r\n    }\r\n\r\n    return (\r\n        <button className={'button option'} onClick={onCheckAnswerWithDefinition}> {word.definition}</button>\r\n    )\r\n};\r\n\r\n\r\nexport default Option;\r\n","import React, {useState} from 'react';\r\nimport './WordTest.css'\r\nimport Option from \"./Option\";\r\n\r\nconst WordTest = ({word,testOptions}) => {\r\n    const [isCorrect,setIsCorrect] = useState(0);\r\n\r\n    const options = testOptions.map(word => {return <Option onCheckAnswer={onCheckAnswer} word={word} key={word.wordId}/>});\r\n\r\n    function onCheckAnswer(answer) {\r\n        if(answer === word.definition){\r\n            setIsCorrect(1);\r\n        }else{\r\n            setIsCorrect(2);\r\n        }\r\n    }\r\n\r\n    let message;\r\n    if(isCorrect === 1){\r\n        message = <p className={'word-test-message correct'}> Correct</p>\r\n    }else if(isCorrect === 2){\r\n        message = <p className={'word-test-message wrong'}> Your are wrong, try again</p>\r\n    }else{\r\n        message = <p className={'word-test-message'}> </p>\r\n    }\r\n\r\n    return (\r\n        <div className={'word-test'}>\r\n            {message}\r\n            <p className={'word'}> {word.wordName}</p>\r\n            <div className={'word-test-options'}>\r\n                {options}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\n\r\nexport default WordTest;\r\n","function shuffleContent(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        const temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\n\r\nfunction generateTestOption(word,wordListArray){\r\n    if(wordListArray.length === 0){\r\n        return [];\r\n    }\r\n\r\n    if(wordListArray.length === 1){\r\n        return wordListArray;\r\n    }\r\n\r\n    if(wordListArray.length <= 4){\r\n        return shuffleContent(wordListArray);\r\n    }\r\n\r\n    let wordListFiltered = wordListArray.filter(item => item.wordName !== word.wordName); //remove the correct answer from array\r\n    wordListFiltered = shuffleContent(wordListFiltered);//shuffle\r\n\r\n    const sliceIndex = getRandomInt(0,wordListFiltered.length - 3); //generate random number from 0 to array.length-3\r\n\r\n    const sliceWordList = wordListFiltered.slice(sliceIndex, sliceIndex + 3); //slice from the random index\r\n    sliceWordList.push(word); // push the correct answer back into array\r\n\r\n    const testOption = shuffleContent(sliceWordList);//shuffle again\r\n\r\n    return testOption;\r\n}\r\n\r\nexport default generateTestOption;","import React, {useState} from 'react';\r\nimport WordTest from \"./WordTest\";\r\nimport './WordTestController.css'\r\nimport generateTestOption from \"../../utility/generateTestOption\";\r\n\r\nconst WordTestController = ({wordListArray}) => {\r\n    const [indexState,setIndexState] = useState(0);\r\n\r\n\r\n    function incrementIndex(){\r\n        setIndexState( ((indexState + 1) > (wordListArray.length -1))? wordListArray.length -1 : (indexState + 1));\r\n    }\r\n\r\n    function decrementIndex() {\r\n        setIndexState( (indexState -1) < 0 ? 0 : (indexState - 1));\r\n    }\r\n\r\n    const newWordListArray = [...wordListArray];\r\n    const testOptions = generateTestOption(wordListArray[indexState],newWordListArray);\r\n\r\n    return (\r\n        <div className={'word-test-controller'}>\r\n            <p className={'word-test-title'}>Word Test</p>\r\n            <WordTest word={wordListArray[indexState] ? wordListArray[indexState] : ''} testOptions={testOptions} key={indexState}/>\r\n            <div className={'controller'}>\r\n                <button className={'decrement'} onClick={decrementIndex}> {\"<\"} </button>\r\n                <button className={'increment'} onClick={incrementIndex}> {\">\"} </button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default WordTestController;\r\n","import React, {useState} from 'react';\r\nimport WordList from \"./WordList\";\r\nimport './WordListPage.css';\r\nimport FlipCardController from \"../learning-option/FlipCardController\";\r\nimport WordTestController from \"../learning-option/WordTestController\";\r\n\r\nconst WordListPage = ({wordList,onDeleteWord,onUpdateWord,onAddWord,onRefreshList,onDeleteAllWord,setErrorState}) => {\r\n    const [isShowFlashCardState,setIsShowFlashCardState] = useState(true);\r\n\r\n    function showFlashCard(){\r\n        setIsShowFlashCardState(true);\r\n    }\r\n\r\n    function showWordTest(){\r\n        setIsShowFlashCardState(false);\r\n    }\r\n    return (\r\n        <div className={'word-list-page'}>\r\n            <button className={'button'} onClick={showFlashCard}> Flash Card</button>\r\n            <button className={'button'} onClick={showWordTest}> Word Test</button>\r\n            {!isShowFlashCardState && <WordTestController word={\"cpu\"} definition={\"cpu\"} wordListArray={Object.values(wordList.words)}/>}\r\n            {isShowFlashCardState && <FlipCardController wordListArray={Object.values(wordList.words)}/>}\r\n            <WordList wordList={wordList} onDeleteWord={onDeleteWord}\r\n                      onUpdateWord={onUpdateWord} onAddWord={onAddWord} onRefresh={onRefreshList}\r\n                      onDeleteAllWord={onDeleteAllWord} setErrorState={setErrorState}/>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default WordListPage;\r\n","import React from 'react';\r\nimport './WordListDescription.css'\r\n\r\nconst WordListDescription = ({wordListId,wordListName,numberOfWord,onWordListSelect,isEditState,onDeleteWordList}) => {\r\n\r\n    function selectWorkList() {\r\n        onWordListSelect(wordListId);\r\n    }\r\n\r\n    function onDeleteWordListWithId() {\r\n        onDeleteWordList(wordListId);\r\n    }\r\n\r\n    return (\r\n            <div className={'word-list-description'} >\r\n                <div className={'word-list-description-wrapper'} onClick={selectWorkList}>\r\n                    <p className={'word-list-name'}>{wordListName}</p>\r\n                    <p className={'number-of-word'}>{numberOfWord} terms</p>\r\n                </div>\r\n                {isEditState && <button className={'button'} onClick={onDeleteWordListWithId}> delete </button>}\r\n            </div>\r\n    )\r\n\r\n};\r\n\r\n\r\nexport default WordListDescription;\r\n","import React from 'react';\r\nimport WordListDescription from \"./WordListDescription\";\r\nimport './SelectWordListBlock.css'\r\n\r\nconst SelectWordListBlock = ({wordLists,onWordListSelect,isEditState,onDeleteWordList}) => {\r\n    let wordListDescription;\r\n    wordListDescription = Object.values(wordLists).map((wordList) =>\r\n        <WordListDescription numberOfWord={Object.values(wordList.words).length} wordListName={wordList.wordListName}\r\n                             key={wordList.wordListId} wordListId={wordList.wordListId} onWordListSelect={onWordListSelect}\r\n                             isEditState={isEditState} onDeleteWordList={onDeleteWordList}/>\r\n    );\r\n    return(\r\n        <div className={'select-word-list-page'}>\r\n            {wordListDescription}\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default SelectWordListBlock;\r\n","import React, {useState} from 'react';\r\nimport SelectWordListBlock from \"./SelectWordListBlock\";\r\nimport './HomePage.css';\r\nimport isInputValidation from \"../../utility/InputValidation\";\r\nimport {getErrorMessage} from \"../../utility/errorMessage\";\r\n\r\n\r\nconst HomePage = ({userProfileState,wordListState,onWordListSelect,onDeleteAllList,onDeleteWordList,onCreateWordList,setErrorState}) => {\r\n    const [inputState,setInputState] = useState(\"\");\r\n    const [isCreateState,setIsCreateState] = useState(false);\r\n    const [isEditState,setIsEditState] = useState(false);\r\n    const DEFAULT_WORDLIST = [];\r\n\r\n    function getInput(event) {\r\n        setInputState(event.target.value);\r\n    }\r\n\r\n    function toggleIsCreateState(){\r\n        setIsCreateState(!isCreateState);\r\n    }\r\n\r\n    function createWordList(){\r\n        if(!isInputValidation(inputState)){\r\n            setErrorState(getErrorMessage('not valid input'));\r\n            return;\r\n        }\r\n        onCreateWordList(inputState,DEFAULT_WORDLIST);\r\n        setInputState('');\r\n    }\r\n\r\n    function toggleIsEditState(){\r\n        setIsEditState(!isEditState);\r\n    }\r\n\r\n    return(\r\n        <div className={'homepage'}>\r\n            <div className={'homepage-description description'}>\r\n                <h3 className={'user'}> {userProfileState.username.toUpperCase() + \"'s study set\"}</h3>\r\n                <button className={'create-word-list  button'} onClick={toggleIsCreateState}>Create</button>\r\n                <button className={'edit-word-list button'} onClick={toggleIsEditState}>Edit</button>\r\n                <button className={'delete-all-word-list delete-button button'} onClick={onDeleteAllList}>Delete</button>\r\n            </div>\r\n            <SelectWordListBlock wordLists={wordListState} onWordListSelect={onWordListSelect} isEditState={isEditState} onDeleteWordList={onDeleteWordList}/>\r\n            { isCreateState && <div className={'home-page-add-list'}>\r\n                <span className={'new-task'}>WordList Name</span>\r\n                <input className={'text-input new-task-input'} onChange={getInput} value={inputState}/>\r\n                <button className={'add'} onClick={createWordList}>Add</button>\r\n            </div>}\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default HomePage;\r\n","const taskReducer = (state , action) => {\r\n    switch (action.type) {\r\n        case 'setWordList': {\r\n            let newState = action.wordList;\r\n            return {...newState};\r\n        }\r\n        case 'getWordList': {\r\n            return state;\r\n        }\r\n        case 'postWordList': {\r\n            const newWordList = createNewWordList(action.wordListName, action.wordListId, action.words);\r\n            return {...state, [action.wordListId]: newWordList};\r\n        }\r\n        case 'updateWordList': {\r\n            const updateTask = createNewWordList(action.wordListName, action.wordListId, action.words);\r\n            return {...state, [action.wordListId]: updateTask};\r\n        }\r\n        case 'deleteWordList': {\r\n            const deletedState = {...state};\r\n            delete deletedState[action.wordListId];\r\n            return deletedState;\r\n        }\r\n        case 'deleteAllWordList': {\r\n            return {};\r\n        }\r\n        case 'postWord': {\r\n            let newState = {...state};\r\n            newState[action.wordListId]['words'][action.wordId] = createNewWord(action.wordName, action.definition, action.wordId);\r\n            return newState;\r\n        }\r\n        case 'updateWord': {\r\n            let newState = {...state};\r\n            newState[action.wordListId]['words'][action.wordId] = createNewWord(action.wordName, action.definition, action.wordId);\r\n            return newState;\r\n        }\r\n        case 'deleteWord': {\r\n            let newState = {...state};\r\n            delete newState[action.wordListId]['words'][action.wordId];\r\n            return newState;\r\n        }\r\n        case 'deleteAllWord': {\r\n            let newState = {...state};\r\n            newState[action.wordListId]['words'] = {};\r\n            return newState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nexport function createNewWordList(wordListName,wordListId,words){\r\n    return {wordListName:wordListName,wordListId:wordListId,words: words||{}}\r\n}\r\n\r\nexport function createNewWord(wordName,definition,wordId) {\r\n    return {wordName:wordName,definition:definition,wordId:wordId}\r\n}\r\n\r\n\r\nexport default taskReducer;","import React, {useEffect, useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {\r\n    createWordListService,\r\n    createWordService,\r\n    fetchLogInService,\r\n    fetchLoginStatusService,\r\n    fetchLogoutService,\r\n    getAllWordListService,\r\n    removeAllWordListService,\r\n    removeAllWordService,\r\n    removeWordListService,\r\n    removeWordService,\r\n    updateThemeService,\r\n    updateWordService\r\n} from \"../src/service/services\";\r\nimport {getErrorMessage} from \"./utility/errorMessage\";\r\nimport NavigationBar from \"./component/navigation/NavigationBar\";\r\nimport Login from \"./component/login/Login\";\r\nimport WordListPage from \"./component/word-list-page/WordListPage\";\r\nimport HomePage from \"./component/home-page/HomePage\";\r\nimport wordListReducer from './reducer/wordListReducer';\r\n\r\nfunction App() {\r\n    const [isLoggedInState, setIsLoggedInState] = useState(false);\r\n    const [errorState, setErrorState] = useState(\"\");\r\n    const [userProfileState, setUserProfileState] = useState({});\r\n    const [selectWordListState,setSelectWordListState] = useState({isSelected:false,wordListId:null});\r\n    const [wordListState, wordListDispatch] = useReducer(wordListReducer, {});\r\n\r\n    useEffect(() => {\r\n        getUserProfile();\r\n    }, []);\r\n\r\n    /* --------------------wordList related function ----------------------------*/\r\n    function getAllWordList(username) {\r\n        clearErrorState();\r\n        getAllWordListService(userProfileState.username || username)\r\n        .then((response) => {\r\n            const wordLists = response.data;\r\n            setWordListToLocalState(wordLists);\r\n        })\r\n        .catch((error) => {\r\n            if (error.message === \"no valid session\") {\r\n                logout();\r\n            }\r\n            setErrorState(getErrorMessage(error.message));\r\n        });\r\n    }\r\n\r\n    function setWordListToLocalState(wordList) {\r\n        wordListDispatch({type: 'setWordList', wordList: wordList});\r\n    }\r\n\r\n\r\n    function removeAllWordList (){\r\n        clearErrorState();\r\n        removeAllWordListService(userProfileState.username)\r\n        .then(()=>{\r\n            removeAllWordListFromLocalState();\r\n        })\r\n        .catch((error)=>{\r\n            if(error.message === \"no valid session\"){\r\n                logout();\r\n            }\r\n            setErrorState(getErrorMessage(error.message));\r\n        });\r\n    }\r\n\r\n    function removeAllWordListFromLocalState() {\r\n        wordListDispatch({type: 'deleteAllWordList'});\r\n    }\r\n\r\n    function removeWordList(wordListId){\r\n        clearErrorState();\r\n        removeWordListService(userProfileState.username,wordListId)\r\n        .then(()=>{\r\n            removeWordListFromLocalState(wordListId);\r\n        })\r\n        .catch((error)=>{\r\n            if(error.message === \"no valid session\"){\r\n                logout();\r\n            }\r\n            setErrorState(getErrorMessage(error.message));\r\n        });\r\n\r\n    }\r\n\r\n    function removeWordListFromLocalState(wordListId) {\r\n        wordListDispatch({type: 'deleteWordList',wordListId:wordListId});\r\n    }\r\n\r\n    function createWordList(wordListName,wordList) {\r\n        clearErrorState();\r\n        createWordListService(userProfileState.username,wordListName,wordList)\r\n        .then((response)=>{\r\n            createWordListToLocalState(response.data.wordListId,response.data.wordListName,\r\n                response.data.words);\r\n        })\r\n        .catch((error)=>{\r\n            if(error.message === \"no valid session\"){\r\n                logout();\r\n            }\r\n            setErrorState(getErrorMessage(error.message));\r\n        });\r\n        \r\n    }\r\n    \r\n    function createWordListToLocalState(wordListId,wordListName,wordList) {\r\n        wordListDispatch({type:'postWordList',wordListId:wordListId,wordListName:wordListName,\r\n            wordList:wordList});\r\n\r\n    }\r\n\r\n    /* --------------------word related function ----------------------------*/\r\n    function createWord(wordListId,wordName,definition){\r\n        clearErrorState();\r\n        createWordService(userProfileState.username,wordListId,{wordName,definition})\r\n        .then((response)=>{\r\n            const wordId = response.data.wordId;\r\n            createWordToLocalState(wordListId,wordId,wordName,definition);\r\n        })\r\n        .catch((error)=>{\r\n            if(error.message === \"no valid session\"){\r\n                logout();\r\n            }\r\n            setErrorState(getErrorMessage(error.message));\r\n        });\r\n    }\r\n\r\n    function createWordToLocalState(wordListId,wordId,wordName,definition){\r\n        wordListDispatch({type:'postWord',wordListId:wordListId,wordId:wordId,wordName:wordName,definition:definition});\r\n    }\r\n\r\n    function updateWord(wordListId,wordId,wordName,definition){\r\n        clearErrorState();\r\n        updateWordService(userProfileState.username,wordListId,wordId,{wordName,definition})\r\n        .then(()=>{\r\n            updateWordToLocalState(wordListId,wordId,wordName,definition);\r\n        })\r\n        .catch((error)=>{\r\n        if(error.message === \"no valid session\"){\r\n            logout();\r\n        }\r\n        setErrorState(getErrorMessage(error.message));\r\n        });\r\n\r\n    }\r\n\r\n    function updateWordToLocalState(wordListId,wordId,wordName,definition){\r\n        wordListDispatch({type:'updateWord',wordListId:wordListId,wordId:wordId,wordName:wordName,definition:definition});\r\n    }\r\n\r\n    function removeWord(wordListId,wordId){\r\n        clearErrorState();\r\n        removeWordService(userProfileState.username,wordListId,wordId)\r\n        .then(()=>{\r\n            removeWordFromLocalState(wordListId,wordId);\r\n        })\r\n        .catch((error)=>{\r\n            if(error.message === \"no valid session\"){\r\n                logout();\r\n            }\r\n            setErrorState(getErrorMessage(error.message));\r\n        });\r\n    }\r\n\r\n    function removeWordFromLocalState(wordListId,wordId){\r\n        wordListDispatch({type:'deleteWord',wordListId:wordListId,wordId:wordId});\r\n    }\r\n\r\n\r\n    function removeAllWord(wordListId){\r\n        clearErrorState();\r\n        removeAllWordService(userProfileState.username,wordListId)\r\n        .then(()=>{\r\n            removeAllWordFromLocalState(wordListId);\r\n        })\r\n        .catch((error)=>{\r\n            if(error.message === \"no valid session\"){\r\n                logout();\r\n            }\r\n            setErrorState(getErrorMessage(error.message));\r\n        });\r\n    }\r\n\r\n    function removeAllWordFromLocalState(wordListId){\r\n        wordListDispatch({type:'deleteAllWord',wordListId:wordListId});\r\n    }\r\n\r\n\r\n    /* --------------------Login related function ----------------------------*/\r\n    function login(username) {\r\n        return fetchLogInService(username)\r\n            .then(() => {\r\n                getUserProfile();\r\n            });\r\n    }\r\n\r\n    /* --------------------Navigation related function ----------------------------*/\r\n    function logout() {\r\n        clearState();\r\n        fetchLogoutService();\r\n    }\r\n\r\n    function setTheme(event) {\r\n        clearErrorState();\r\n        const theme = event.target.value;\r\n        updateThemeService(userProfileState.username, theme)\r\n            .then(() => {\r\n                setUserProfile(userProfileState.username, theme);\r\n                document.body.setAttribute('data-theme', theme);\r\n            })\r\n            .catch((error) => {\r\n                if (error.message === \"no valid session\") {\r\n                    logout();\r\n                }\r\n                setErrorState(getErrorMessage(error.message));\r\n            });\r\n    }\r\n\r\n    function getUserProfile() {\r\n        return fetchLoginStatusService()\r\n            .then((response) => {\r\n                const username = response.data.username;\r\n                let theme = response.data.theme;\r\n                setUserProfile(username, theme);\r\n                return response;\r\n            }).then((response) => {\r\n                getAllWordList(response.data.username);\r\n                return response;\r\n            }).then((response) => {\r\n                setIsLoggedInState(true);\r\n                document.body.setAttribute('data-theme', response.data.theme);\r\n            })\r\n            .catch((error) => {\r\n                setErrorState(getErrorMessage(error.message));\r\n            });\r\n    }\r\n\r\n    function setUserProfile(username, theme) {\r\n        setUserProfileState({...userProfileState, username: username, theme: theme});\r\n    }\r\n\r\n    function clearState() {\r\n        setUserProfileState({});\r\n        clearErrorState();\r\n        setIsLoggedInState(false);\r\n        setWordListToLocalState({});\r\n    }\r\n\r\n    function clearErrorState() {\r\n        setErrorState('');\r\n    }\r\n\r\n    /* --------------------HomePage related function ----------------------------*/\r\n    function selectWordList(wordListId){\r\n        clearErrorState();\r\n        setSelectWordListState({isSelected: true,wordListId:wordListId});\r\n\r\n    }\r\n    /* --------------------WordListPage related function ----------------------------*/\r\n    function back(){\r\n        clearErrorState();\r\n        setSelectWordListState({isSelected:false,wordListId:null});\r\n    }\r\n\r\n    /* --------------------rendering ---------------------------------*/\r\n    let content;\r\n\r\n    if (isLoggedInState) {\r\n        if(!selectWordListState.isSelected){\r\n            content =\r\n                <div>\r\n                    <HomePage wordListState={wordListState} userProfileState={userProfileState}\r\n                              onWordListSelect={selectWordList} onDeleteAllList={removeAllWordList}\r\n                              onDeleteWordList={removeWordList} onCreateWordList={createWordList} setErrorState={setErrorState}/>\r\n                </div>\r\n        }else{\r\n            const wordList = wordListState[selectWordListState.wordListId];\r\n            content = <WordListPage wordList={wordList} onAddWord={createWord} onUpdateWord={updateWord}\r\n                                    onDeleteWord={removeWord} onDeleteAllWord={removeAllWord} onRefreshList={getAllWordList}\r\n                                    setErrorState={setErrorState}/>\r\n        }\r\n\r\n    } else {\r\n        content = <p/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {isLoggedInState && <NavigationBar userProfileState={userProfileState} isLoggedIn={isLoggedInState}\r\n                                               onLogout={logout} error={errorState} onThemeChange={setTheme}\r\n                                               onBack={back} selectWordListState={selectWordListState}/>}\r\n            {!isLoggedInState && <Login onLogin={login} setError={setErrorState}/>}\r\n            {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","\r\nexport const fetchLogInService = (username) => {\r\n    return fetch('/session', {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n            'content-type': 'application/json',\r\n        }),\r\n        body: JSON.stringify({ username : username }),\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\n\r\nexport const fetchLogoutService  = function () {\r\n    return fetch('/session', {\r\n        method: 'DELETE',\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return ;\r\n        });\r\n};\r\n\r\nexport const fetchLoginStatusService = () => {\r\n    return fetch('/session', {\r\n        method: 'GET',\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n/* ------------- theme related fetch call ----------------*/\r\n\r\nexport const fetchThemeService = (username) => {\r\n    return fetch(`/theme/${username}`, {\r\n        method: 'GET',\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(response.status === 304){\r\n                return response.json();\r\n            }\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const updateThemeService = (username,theme) => {\r\n    return fetch(`/theme/${username}`, {\r\n        method: 'PUT',\r\n        headers: new Headers({\r\n            'content-type': 'application/json',\r\n        }),\r\n        body: JSON.stringify({ theme : theme }),\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\n\r\n\r\n/* ------------- wordList related Service call ----------------*/\r\nexport const getAllWordListService = (username) => {\r\n    return fetch(`/wordList/${username}`, {\r\n        method: 'GET',\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const getWordListService = (username,wordListId) => {\r\n    return fetch(`/wordList/${username}/${wordListId}`, {\r\n        method: 'GET',\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const createWordListService = (username,wordListName,wordList) => {\r\n    return fetch(`/wordList/${username}`, {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n            'content-type': 'application/json',\r\n        }),\r\n        body: JSON.stringify({\r\n                wordListName:wordListName,\r\n                wordList: wordList\r\n        }),\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const updateWordListService = (username,wordListId,wordList) => {\r\n    return fetch(`/wordList/${username}/${wordListId}`, {\r\n        method: 'PUT',\r\n        headers: new Headers({\r\n            'content-type': 'application/json',\r\n        }),\r\n        body: JSON.stringify({\r\n            wordList:wordList\r\n        }),\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const removeWordListService = (username,wordListId) => {\r\n    return fetch(`/wordList/${username}/${wordListId}`, {\r\n        method: 'DELETE',\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const removeAllWordListService = (username) => {\r\n    return fetch(`/wordList/${username}`, {\r\n        method: 'DELETE',\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\n/* ------------- wordList related Service call ----------------*/\r\n\r\nexport const getWordService = (username,wordListId,wordId) => {\r\n    return fetch(`/word/${username}/${wordListId}/${wordId}`, {\r\n        method: 'GET',\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const createWordService = (username,wordListId,word) => {\r\n    return fetch(`/word/${username}/${wordListId}`, {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n            'content-type': 'application/json',\r\n        }),\r\n        body: JSON.stringify({\r\n                word:word\r\n        }),\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const updateWordService = (username,wordListId,wordId,word) => {\r\n    return fetch(`/word/${username}/${wordListId}/${wordId}`, {\r\n        method: 'PUT',\r\n        headers: new Headers({\r\n            'content-type': 'application/json',\r\n        }),\r\n        body: JSON.stringify({\r\n            word:word\r\n        }),\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const removeWordService = (username,wordListId,wordId) => {\r\n    return fetch(`/word/${username}/${wordListId}/${wordId}`, {\r\n        method: 'DELETE',\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n\r\nexport const removeAllWordService = (username,wordListId) => {\r\n    return fetch(`/word/${username}/${wordListId}`, {\r\n        method: 'DELETE',\r\n    })\r\n        .catch( () => {\r\n            return Promise.reject({code: 'network-error'});\r\n        })\r\n        .then( (response) => {\r\n            if(!response.ok) {\r\n                return response.json().then( result => Promise.reject(result) );\r\n            }\r\n            return response.json();\r\n        });\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}